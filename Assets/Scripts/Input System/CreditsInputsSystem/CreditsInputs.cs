//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Input System/CreditsInputsSystem/CreditsInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CreditsInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CreditsInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CreditsInputs"",
    ""maps"": [
        {
            ""name"": ""Credits"",
            ""id"": ""b7d7557d-a102-4a0e-9799-6dc55fa8facc"",
            ""actions"": [
                {
                    ""name"": ""OnInteract"",
                    ""type"": ""Button"",
                    ""id"": ""1eab08f0-e6ce-4b45-b646-a8e0233f260c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""16526aa3-cb8a-4c5b-b6b4-ee9d7793990c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Credits
        m_Credits = asset.FindActionMap("Credits", throwIfNotFound: true);
        m_Credits_OnInteract = m_Credits.FindAction("OnInteract", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Credits
    private readonly InputActionMap m_Credits;
    private List<ICreditsActions> m_CreditsActionsCallbackInterfaces = new List<ICreditsActions>();
    private readonly InputAction m_Credits_OnInteract;
    public struct CreditsActions
    {
        private @CreditsInputs m_Wrapper;
        public CreditsActions(@CreditsInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnInteract => m_Wrapper.m_Credits_OnInteract;
        public InputActionMap Get() { return m_Wrapper.m_Credits; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CreditsActions set) { return set.Get(); }
        public void AddCallbacks(ICreditsActions instance)
        {
            if (instance == null || m_Wrapper.m_CreditsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CreditsActionsCallbackInterfaces.Add(instance);
            @OnInteract.started += instance.OnOnInteract;
            @OnInteract.performed += instance.OnOnInteract;
            @OnInteract.canceled += instance.OnOnInteract;
        }

        private void UnregisterCallbacks(ICreditsActions instance)
        {
            @OnInteract.started -= instance.OnOnInteract;
            @OnInteract.performed -= instance.OnOnInteract;
            @OnInteract.canceled -= instance.OnOnInteract;
        }

        public void RemoveCallbacks(ICreditsActions instance)
        {
            if (m_Wrapper.m_CreditsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICreditsActions instance)
        {
            foreach (var item in m_Wrapper.m_CreditsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CreditsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CreditsActions @Credits => new CreditsActions(this);
    public interface ICreditsActions
    {
        void OnOnInteract(InputAction.CallbackContext context);
    }
}
